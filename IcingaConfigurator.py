#!/usr/bin/env python
#IcingaConfigurator v 1.0 -- Jamin Becker 11-20-2012
import os
import time
########################################################################EDITABLES###########################################################################
#Configuration File Locations:
checkcommands='/etc/icinga/checkcommands.cfg'                                      #location of the commands.cfg
checkHosts='/etc/icinga/objects/checkHosts.cfg'                                    #location of the Hosts.cfg
checkHostTemplates='/etc/icinga/objects/checkHostTemplates.cfg'                    #location of the HostTemplates.cfg
checkServices='/etc/icinga/objects/checkServices.cfg'                              #location of the Services.cfg
checkServiceTemplates='/etc/icinga/objects/checkServiceTemplates.cfg'              #location of the ServiceTemplates.cfg   

#Default check_commands:
check_commandHost = 'check_host_alive_icinga'                                      #default check_command that a new host will use if none is specified
check_commandService = 'check_ping_icinga!400,20%!600,50%'                         #default check_command that a new service will use if none is specified

#Default Templates:
hostTemplate = 'generic-host'                                                      #default template that a new host will use if none is specified
serviceTemplate = 'nbconnections'                                                  #default template that a new service will use if none is specified 

#Backup Directory (This should be created prior to running this script)
backupVar='/etc/icinga/objects/BACKUP/'                                            #path to your backup directory! Everytime a new change is made the old configuration files will be backuped to this directory and appended by date and time

#Commands (These are usually the same in most linux distros)
sudo='/usr/bin/sudo'                                                               #system location for sudo 'run whereis sudo if unsure'
service='/usr/bin/service'                                                         #system location for service 'run whereis service if unsure'
cp='/bin/cp'                                                                       #system location for cp 'run whereis cp if unsure'
cat='/bin/cat'                                                                     #system location for cat 'run whereis cat if unsure'
grep='/bin/grep'                                                                   #system location for grep 'run whereis grep if unsure'
nano = '/bin/nano'                                                                 #system location for nano 'run whereis nano if unsure'
##############################################################DON'T EDIT BELOW THIS LINE!##################################################################
appendTime='\''+time.asctime( time.localtime(time.time()))+'\''			   #Grabs time and date
def backup():

	global checkcommands
	global checkHosts
	global checkHostTemplates
	global checkServices
	global checkServiceTemplates
	global backupVar
	global sudo
	global cp
	global appendTime
	print checkcommands
	print backupVar
	os.system(sudo+" " +cp+" "+ checkcommands+" "+ backupVar+"checkcommands.cfg."+appendTime)
 	os.system(sudo+" " +cp+" "+ checkHosts+" "+ backupVar+"checkHosts.cfg."+appendTime)
	os.system(sudo+" " +cp+" "+ checkServices+" "+ backupVar+"checkServices.cfg."+appendTime)
	os.system(sudo+" " +cp+" "+ checkHostTemplates+" "+ backupVar+"checkHostTemplates.cfg."+appendTime)
	os.system(sudo+" " +cp+" "+ checkServiceTemplates+" "+ backupVar+"checkServiceTemplates.cfg."+appendTime)

def restartDaemon(): #Restart the Icinga Daemon
	#Local Variables
	global sudo
	global service
	#Commandline
	os.system(sudo + " " + service +" icinga restart")

def addCommand(): #Add a command
	global checkcommands
	global sudo
	#Local Variables
	command_line=""
	command_name=""
	#Run Backup
	backup()
	print "System is backing up your configuration!"
	print "/etc/Icinga/objects/BACKUP"
	print "\n\n"
	#Get Input
	print "Add a new command!"
	command_name=raw_input ('command_name: ') 
	command_line=raw_input ('command_line: ') 
	#Preview Output
        print("\ndefine command{")
        print("\n\t"+"command_name\t\t\t"+command_name)
        print("\n\t"+"command_line\t\t\t"+"$USER1$/"+command_line)
        print("\n"+"}")
 	print "Do you wish to write the above configuration?)"
        choice=raw_input('y/n: ')
	#Write to File
        if choice =='y':
                print "Written!"
		print "View your configuration at "+checkcommands
		file = open(checkcommands,'a')
		file.write("\n#This entry was generated by script on "+time.asctime( time.localtime(time.time())))
		file.write("\ndefine command{")
		file.write("\n\t"+"command_name\t\t\t"+command_name)
		file.write("\n\t"+"command_line\t\t\t"+"$USER1$/"+command_line)
		file.write("\n"+"}")
		file.close()
		#Restart Daemon
		print("In order for these changes to take effect the Icinga daemon MUST be restarted. Restart?")
		choice=raw_input("y/n: ")
		if(choice=='y'):
			restartDaemon()
		else:
			print "Good Bye!"
	else:
		print "Not Written"
def addHost(): #Add a host
	global sudo
	global cat
	global grep
	global checkHosts
	global check_commandHost
	global checkcommands
	global hostTemplate
	#Local Variables
      	choice = "n"
        host_name=""
        alias=""
	address=""
	check_command = check_commandHost
	use = hostTemplate
	use2="null"
	#Run Backup
        backup()
        print "System is backing up your configuration!"
        print "/etc/Icinga/objects/BACKUP"
        print "\n\n"
	#Get Input
        print "Add a new Host!"
        host_name=raw_input ('host_name: ')
	print "The default template used is "+ hostTemplate+". This works for almost everything. Leave as default?"
	choice=raw_input('y/n: ')
	if choice=='n':
		os.system(cat+" "+checkHostTemplates+"|"+grep+" "+"name")
        	use=raw_input ('use: ')
		print "Use an additional template?"
		choice=raw_input ('y/n: ')
		if choice =='y':
			use2=raw_input('use: ')
		else:
			use2="null"
        	choice='n'
	alias=raw_input('alias: ')
	address=raw_input('address: ')
	print "The default check command for hosts is "+check_commandHost+". Leave as default?"
        choice=raw_input('y/n: ')
        if choice=='n':
		print " Do you wish to scan the checkcommands.cfg file to view a list of available commands?"
		choice=raw_input('y/n: ')
		if choice=='y':
			os.system(cat+" "+checkcommands+"|"+grep+" "+"command_name")
			check_command=raw_input ('check_command: ')
			choice='n'
		else:
			check_command=check_commandHost
                choice='n'
	#Preview Output
        print("\ndefine host{")
        print("\n\t"+"host_name\t\t\t\t"+host_name)
        print("\n\t"+"use\t\t\t"+use)
	if use2!="null":
		print("\n\t"+"use\t\t\t"+use2)	
        print("\n\t"+"address\t\t\t"+address)
        print("\n\t"+"alias\t\t\t"+alias)
        print("\n\t"+"check_command\t\t"+check_command)
        print("\n"+"}")
	print "Do you wish to write the above configuration?"
	choice=raw_input('y/n: ')
	#Write to file
	if choice =='y':
		print "Written!"
		print "View your configuration at "+checkHosts
		file = open(checkHosts,'a')
		file.write("\n#This entry was generated by script on "+time.asctime( time.localtime(time.time())))
		file.write("\ndefine host{")
		file.write("\n\t"+"host_name\t\t\t\t"+host_name)
		file.write("\n\t"+"use\t\t\t"+use)
		if use2!="null":
                	file.write("\n\t"+"use\t\t\t"+use2)
		file.write("\n\t"+"address\t\t\t"+address)
		file.write("\n\t"+"alias\t\t\t"+alias)
		file.write("\n\t"+"check_command\t\t"+check_command)
		file.write("\n"+"}")
		file.close()
		print("In order for these changes to take effect the Icinga daemon MUST be restarted. Restart?")
                choice=raw_input("y/n: ")
             	if(choice=='y'):
                	restartDaemon()
               	else:
                	print "Good Bye!"

	else:
		print "Not Written"

def addService():
	global sudo
	global cat
	global grep
	global checkServices
	global checkcommands
	global checkServiceTemplates
	global check_commandService
	global serviceTemplate

	#Local Variables
	choice = "n"
        host_name=""
        service_description=""
        check_command = check_commandService
  	use = serviceTemplate 
	#Run Backup
        backup()
        print "System is backing up your configuration!"
        print "/etc/Icinga/objects/BACKUP"
        print "\n\n"
        print "Add a new Service!"
        host_name=raw_input ('host_name: ')
	service_description=raw_input('service_description: ')
        print "The default template used is "+serviceTemplate+". If you leave default you MUST specify a check command. Leave as default?"
        choice=raw_input('y/n: ')
	#Template Selection
        if choice=='n':
                print "The following templates are available for your configuration"
		os.system(cat+" "+checkServiceTemplates+"|"+grep+" "+"name")
                choice='n'
		use=raw_input('use:')
		check_command='null'
	if use == serviceTemplate:
       		print "The default check command for hosts is "+check_commandService+ " . Do you wish to add your own?"
        	choice=raw_input('y/n: ')
        	if choice=='y':
			print " Do you wish to scan the checkService.cfg file to view a list of available commands?"
			choice=raw_input('y/n: ')
			if choice=='y':
				os.system(cat+" "+checkcommands+"|"+grep+" "+"command_name")
                		check_command=raw_input ('check_command: ')
                		choice='n'
			else:
				check_command=check_commandService
	#Preview Output
        print("\ndefine service{")
        print("\n\t"+"host_name\t\t\t\t\t"+host_name)
	print("\n\t"+"service_description\t\t\t"+service_description)
        print("\n\t"+"use\t\t\t\t\t"+use)
	if check_command!='null':
       		print("\n\t"+"check_command\t\t\t\t"+check_command)
        print("\n"+"}")
        print "Do you wish to write the above configuration?)"
        choice=raw_input('y/n: ')
	#Write to file
        if choice =='y':
                print "Written!"
                print "View your configuration at "+checkServices
                file = open(checkServices,'a')
                file.write("\n#This entry was generated by script on "+time.asctime( time.localtime(time.time())))
		file.write("\ndefine service{")
		file.write("\n\t"+"host_name\t\t\t\t\t"+host_name)
        	file.write("\n\t"+"service_description\t\t"+service_description)
        	file.write("\n\t"+"use\t\t\t\t"+use)
        	if check_command!='null':
                	file.write("\n\t"+"check_command\t\t\t"+check_command)
        	file.write("\n"+"}")
		file.close()
		print("In order for these changes to take effect the Icinga daemon MUST be restarted. Restart?")
                choice=raw_input("y/n: ")
       	        if(choice=='y'):
  	              restartDaemon()
               	else:
                	print "Good Bye!"

        else:
                print "Not Written"	

def manualEdit(): #Allows user to edit configuration files
	global nano
	global sudo
	global checkcommands
        global checkHosts
        global checkHostTemplates
        global checkServices
        global checkServiceTemplates
	#Menu Selection
	print "(1) edit checkcommands.cfg \n(2) edit checkHosts.cfg \n(3) edit checkServices.cfg \n(4) edit checkHostTemplates.cfg \n(5) edit checkServiceTemplates.cfg"
	choice=input('-> ')

	if choice==1:
		os.system(sudo+" "+nano+" "+checkcommands)
	elif choice==2:
		os.system(sudo+" "+nano+" "+checkHosts)
	elif choice==3:
		os.system(sudo+" "+nano+" "+checkServices)
	elif choice==4:
		os.system(sudo+" "+nano+" "+checkHostTemplates)
	elif choice==5:
		os.system(sudo+" "+nano+" "+checkServiceTemplates)



def main():
	exit=0
	os.system('clear')
	print """ 
    ____       _                                                           
   /  _/_____ (_)____   ____ _ ____ _                                      
   / / / ___// // __ \ / __ `// __ `/                                      
 _/ / / /__ / // / / // /_/ // /_/ /                                       
/___/ \___//_//_/ /_/ \__, / \__,_/                                        
                     /____/                                                
   ______               ____ _                             __              
  / ____/____   ____   / __/(_)____ _ __  __ _____ ____ _ / /_ ____   _____
 / /    / __ \ / __ \ / /_ / // __ `// / / // ___// __ `// __// __ \ / ___/
/ /___ / /_/ // / / // __// // /_/ // /_/ // /   / /_/ // /_ / /_/ // /    
\____/ \____//_/ /_//_/  /_/ \__, / \__,_//_/    \__,_/ \__/ \____//_/     
                            /____/                                         --Also compatible
                            with Nagios"""
	print "\n"
	print time.asctime(time.localtime(time.time()))+"\n"
	print "\nWelcome to Icinga Configurator v 1.0 by Jamin B"
	print "Some commands need root access to run. Make sure you run this command with \"sudo ./IcingaConfigurator\""
	while exit==0:
		print "\n\n(1) Restart the Icinga daemon.\n(2) Add a new command.\n(3) Add a new host.\n(4) Add a new service.\n(5) Manually edit configuration scripts.\n(6) Backup an existing configuration.\n(7) Help\n(8) Exit."
		choice=input('-> ')
		if choice==1:
			restartDaemon()
		elif choice==2:
			addCommand()
		elif choice==3:
			addHost()
		elif choice==4:
			addService()
		elif choice==5:
			manualEdit()
		elif choice==6:
			backup()
		elif choice==7:
			help()		
		elif choice==8:
			print "Good Bye"
			exit=1		
		else:
			print "Invalid choice!"

def help():
	exit=0
	while exit==0:
		choice = 0
		print "In order to use this script you will need to edit the section marked EDITABLE"
		print "1. Changelog\n2. Dependency locations\n3. Exit"
		choice = input('1/2/3: ')
		if choice == 1:
			print """
#################################################Changelog##############################################
#version 0.1:
#       Basic configuration now working
#       Known Bugs: When adding a host/service/or command the daemon restarts without applying changes.
#version 0.2:
#       Added a list commands option when adding a custom command
#       Fixed the daemon restart problems when adding a host/service or command
#       Added title
#version 1.0:
#       Globalized all variables allowing for full easy customization
#       Added config search functionality for displaying available commands/templates
#       Added some additional error catching for script stability
#       Made adding a host and service slightly more intuitive
#       Populated script with comments making it easier to understand
#	Added a help option to the menu
########################################################################################################
"""
		elif choice == 2:
			print "Have you installed\n1. Icinga\n2. Nagios"
			choice = input('1/2 ' )
			if choice == 1: 
				print"\n"
				os.system("whereis"+ " " +"icinga")
			elif choice == 2:
				print"\n"
        	        	os.system("whereis"+ " " +"nagios")
                	print"\n"
			os.system("whereis"+ " " +"cat")
			print"\n"
		        os.system("whereis"+ " " +"cp")
                	print"\n"
                	os.system("whereis"+ " " +"grep")
                	print"\n"
                	os.system("whereis"+ " " +"nano")
                	print"\n"
                	os.system("whereis"+ " " +"service")
                	print"\n"
                	os.system("whereis"+ " " +"sudo")
                	print"\n"
		elif choice == 3:
			exit=1
		else:
			print "Invalid choice!"
			exit=1




main()
#################################################Changelog##############################################
#version 0.1:
#	Basic configuration now working
#	Known Bugs: When adding a host/service/or command the daemon restarts without applying changes.
#version 0.2:
#	Added a list commands option when adding a custom command
#	Fixed the daemon restart problems when adding a host/service or command
#	Added title
#version 1.0:
#	Globalized all variables allowing for full easy customization
#	Added config search functionality for displaying available commands/templates
#	Added some additional error catching for script stability
#	Made adding a host and service slightly more intuitive
#	Populated script with comments making it easier to understand
#	added a help option to the menu 
########################################################################################################

